find_program(GLSLC_COMMAND glslc REQUIRED)
find_program(SPIRV_CROSS_COMMAND spirv-cross REQUIRED)

function(target_package_resources RESOURCE_TARGET RESOURCE_PACKAGE_DIRECTORY)
    if(NOT EXISTS "${RESOURCE_PACKAGE_DIRECTORY}")
        set(RESOURCE_PACKAGE_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/${RESOURCE_PACKAGE_DIRECTORY}")
    endif()
	
	get_property(PROJECT_ROOTS GLOBAL PROPERTY "PROJECT_ROOTS")
	set(PROJECT_ROOTS ${PROJECT_ROOTS} ${CMAKE_CURRENT_SOURCE_DIR})
	set_property(GLOBAL PROPERTY PROJECT_ROOTS "${PROJECT_ROOTS}")

    target_include_directories(${RESOURCE_TARGET} PUBLIC "${RESOURCE_PACKAGE_DIRECTORY}")

    get_target_property(RESOURCE_INCLUDE_DIRECTORIES1 ${RESOURCE_TARGET} INCLUDE_DIRECTORIES)
    get_target_property(RESOURCE_INCLUDE_DIRECTORIES2 ${RESOURCE_TARGET} INTERFACE_INCLUDE_DIRECTORIES)
    set(RESOURCE_INCLUDE_DIRECTORIES ${RESOURCE_INCLUDE_DIRECTORIES1} ${RESOURCE_INCLUDE_DIRECTORIES2})
    list(REMOVE_DUPLICATES RESOURCE_INCLUDE_DIRECTORIES)
    set(RESOURCE_INCLUDE_ARGUMENTS "-I" "${RESOURCE_PACKAGE_DIRECTORY}")
    foreach(INCLUDE_DIRECTORY ${RESOURCE_INCLUDE_DIRECTORIES})
        list(APPEND RESOURCE_INCLUDE_ARGUMENTS "-I" "${INCLUDE_DIRECTORY}")
    endforeach()

	# Bake shaders
	file(GLOB_RECURSE SHADER_SOURCE_FILES RELATIVE "${RESOURCE_PACKAGE_DIRECTORY}"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.vert"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.tesc"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.tese"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.geom"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.frag"
    )

	foreach(SHADER ${SHADER_SOURCE_FILES})
		get_filename_component(SHADER_NAME "${SHADER}" NAME_WE)
		get_filename_component(SHADER_DIRECTORY "${SHADER}" DIRECTORY)
		get_filename_component(SHADER_EXT "${SHADER}" EXT)

		if (NOT SHADER_DIRECTORY STREQUAL "")
			set(SHADER_DIRECTORY "${SHADER_DIRECTORY}/")
		endif()

		if(${SHADER_EXT} STREQUAL ".vert")
            set(SHADER_STAGE "SIGMA_ENGINE_VERTEX_SHADER")
			set(SHADER_TYPE "vertex")
		elseif(${SHADER_EXT} STREQUAL ".tesc")
			set(SHADER_STAGE "SIGMA_ENGINE_TESSELLATION_CONTROL_SHADER")
			set(SHADER_TYPE "tessellation_control")
		elseif(${SHADER_EXT} STREQUAL ".tese")
			set(SHADER_STAGE "SIGMA_ENGINE_TESSELLATION_EVALUATION_SHADER")
			set(SHADER_TYPE "tessellation_evaluation")
		elseif(${SHADER_EXT} STREQUAL ".geom")
            set(SHADER_STAGE "SIGMA_ENGINE_GEOMETRY_SHADER")
			set(SHADER_TYPE "geometry")
		elseif(${SHADER_EXT} STREQUAL ".frag")
            set(SHADER_STAGE "SIGMA_ENGINE_FRAGMENT_SHADER")
			set(SHADER_TYPE "fragment")
        endif()

		set(SHADER "${RESOURCE_PACKAGE_DIRECTORY}/${SHADER}")
		set(SHADER_OUTPUT "${CMAKE_BINARY_DIR}/data/shader/${SHADER_TYPE}/${SHADER_DIRECTORY}${SHADER_NAME}")
		get_filename_component(SHADER_OUTPUT_DIRECTORY "${SHADER_OUTPUT}" DIRECTORY)

		execute_process(
			COMMAND ${GLSLC_COMMAND} -D${SHADER_STAGE} ${RESOURCE_INCLUDE_ARGUMENTS} -M ${SHADER}
			OUTPUT_VARIABLE R_DEPENDS
			WORKING_DIRECTORY ${RESOURCE_PACKAGE_DIRECTORY}
		)

		string(REPLACE "${SHADER_NAME}${SHADER_EXT}.spv: " "" R_DEPENDS ${R_DEPENDS})
		string(REPLACE " " ";" R_DEPENDS ${R_DEPENDS})

        add_custom_command(
			OUTPUT "${SHADER_OUTPUT}${SHADER_EXT}_spv"
			COMMAND ${CMAKE_COMMAND} -E make_directory ${SHADER_OUTPUT_DIRECTORY}
			COMMAND ${GLSLC_COMMAND} --target-env=opengl -D${SHADER_STAGE} ${RESOURCE_INCLUDE_ARGUMENTS} "${SHADER}" -o "${SHADER_OUTPUT}${SHADER_EXT}_spv"
			DEPENDS ${R_DEPENDS}
        )

        add_custom_command(
			OUTPUT "${SHADER_OUTPUT}${SHADER_EXT}_spv.json"
			COMMAND ${CMAKE_COMMAND} -E make_directory ${SHADER_OUTPUT_DIRECTORY}
			COMMAND ${SPIRV_CROSS_COMMAND} "${SHADER_OUTPUT}${SHADER_EXT}_spv" --reflect --output "${SHADER_OUTPUT}${SHADER_EXT}_spv.json"
			DEPENDS "${SHADER_OUTPUT}${SHADER_EXT}_spv"
        )

        add_custom_command(
			OUTPUT "${SHADER_OUTPUT}${SHADER_EXT}_vulkan_spv"
			COMMAND ${CMAKE_COMMAND} -E make_directory ${SHADER_OUTPUT_DIRECTORY}
			COMMAND ${GLSLC_COMMAND} --target-env=vulkan -D${SHADER_STAGE} ${RESOURCE_INCLUDE_ARGUMENTS} "${SHADER}" -o "${SHADER_OUTPUT}${SHADER_EXT}_vulkan_spv"
			DEPENDS ${R_DEPENDS}
        )

        add_custom_command(
			OUTPUT "${SHADER_OUTPUT}${SHADER_EXT}_vulkan_spv.json"
			COMMAND ${CMAKE_COMMAND} -E make_directory ${SHADER_OUTPUT_DIRECTORY}
			COMMAND ${SPIRV_CROSS_COMMAND} "${SHADER_OUTPUT}${SHADER_EXT}_spv" --reflect --output "${SHADER_OUTPUT}${SHADER_EXT}_vulkan_spv.json"
			DEPENDS "${SHADER_OUTPUT}${SHADER_EXT}_spv"
        )

        add_custom_command(
			OUTPUT "${SHADER_OUTPUT}"
			COMMAND sigma-bake -o "${CMAKE_BINARY_DIR}" "${SHADER_OUTPUT}${SHADER_EXT}_spv"
			DEPENDS "${SHADER_OUTPUT}${SHADER_EXT}_spv" "${SHADER_OUTPUT}${SHADER_EXT}_spv.json" "${SHADER_OUTPUT}${SHADER_EXT}_vulkan_spv" "${SHADER_OUTPUT}${SHADER_EXT}_vulkan_spv.json"
			WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/data/shader"
        )

		list(APPEND SHADER_OUTPUT_FILES "${SHADER_OUTPUT}")
    endforeach()

	# Bake textures
	file(GLOB_RECURSE TEXTURE_SOURCE_FILES RELATIVE "${RESOURCE_PACKAGE_DIRECTORY}"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.tiff"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.tif"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.jpg"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.jpeg"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.jpe"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.jif"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.jfif"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.jfi"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.png"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.hdr"
    )

	foreach(TEXTURE ${TEXTURE_SOURCE_FILES})
		get_filename_component(TEXTURE_NAME "${TEXTURE}" NAME_WE)
		get_filename_component(TEXTURE_DIRECTORY "${TEXTURE}" DIRECTORY)
		get_filename_component(TEXTURE_EXT "${TEXTURE}" EXT)

		if (NOT TEXTURE_DIRECTORY STREQUAL "")
			set(TEXTURE_DIRECTORY "${TEXTURE_DIRECTORY}/")
		endif()

		set(TEXTURE "${RESOURCE_PACKAGE_DIRECTORY}/${TEXTURE}")
		set(TEXTURE_SETTINGS "${RESOURCE_PACKAGE_DIRECTORY}/${TEXTURE_DIRECTORY}${TEXTURE_NAME}.stex")
		set(TEXTURE_OUTPUT "${CMAKE_BINARY_DIR}/data/texture/${TEXTURE_DIRECTORY}${TEXTURE_NAME}")

		set(TEXTURE_DEPENDS "${TEXTURE}")
		if(EXISTS "${TEXTURE_SETTINGS}")
			set(TEXTURE_DEPENDS "${TEXTURE}" "${TEXTURE_SETTINGS}")
		endif()

        add_custom_command(
			OUTPUT ${TEXTURE_OUTPUT}
			COMMAND sigma-bake -o "${CMAKE_BINARY_DIR}" "${TEXTURE}"
			DEPENDS ${TEXTURE_DEPENDS}
			WORKING_DIRECTORY ${RESOURCE_PACKAGE_DIRECTORY}
        )

		list(APPEND TEXTURE_OUTPUT_FILES ${TEXTURE_OUTPUT})
    endforeach()

	# Bake materials
	file(GLOB_RECURSE MATERIAL_SOURCE_FILES RELATIVE "${RESOURCE_PACKAGE_DIRECTORY}"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.smat"
    )

	foreach(MATERIAL ${MATERIAL_SOURCE_FILES})
		get_filename_component(MATERIAL_NAME "${MATERIAL}" NAME_WE)
		get_filename_component(MATERIAL_DIRECTORY "${MATERIAL}" DIRECTORY)
		get_filename_component(MATERIAL_EXT "${MATERIAL}" EXT)

		if (NOT MATERIAL_DIRECTORY STREQUAL "")
			set(MATERIAL_DIRECTORY "${MATERIAL_DIRECTORY}/")
		endif()

		set(MATERIAL "${RESOURCE_PACKAGE_DIRECTORY}/${MATERIAL}")
		set(MATERIAL_OUTPUT "${CMAKE_BINARY_DIR}/data/material/${MATERIAL_DIRECTORY}${MATERIAL_NAME}")

		# TODO: make this smarter
		set(MATERIAL_DEPENDS "${MATERIAL}" ${TEXTURE_OUTPUT_FILES} ${SHADER_OUTPUT_FILES})

        add_custom_command(
			OUTPUT ${MATERIAL_OUTPUT}
			COMMAND sigma-bake -o "${CMAKE_BINARY_DIR}" "${MATERIAL}"
			DEPENDS ${MATERIAL_DEPENDS}
			WORKING_DIRECTORY ${RESOURCE_PACKAGE_DIRECTORY}
        )

	list(APPEND MATERIAL_OUTPUT_FILES ${MATERIAL_OUTPUT})
    endforeach()

	# Bake static meshes
	file(GLOB_RECURSE STATIC_MESH_SOURCE_FILES RELATIVE "${RESOURCE_PACKAGE_DIRECTORY}"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.3ds"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.dae"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.fbx"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.ifc-step"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.ase"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.dxf"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.hmp"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.md2"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.md3"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.md5"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.mdc"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.mdl"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.nff"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.ply"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.stl"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.x"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.obj"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.opengex"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.smd"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.lwo"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.lxo"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.lws"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.ter"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.ac3d"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.ms3d"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.cob"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.q3bsp"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.xgl"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.csm"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.bvh"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.b3d"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.ndo"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.q3d"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.gltf"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.3mf"
        "${RESOURCE_PACKAGE_DIRECTORY}/*.blend"
    )

	foreach(STATIC_MESH ${STATIC_MESH_SOURCE_FILES})
		get_filename_component(STATIC_MESH_NAME "${STATIC_MESH}" NAME_WE)
		get_filename_component(STATIC_MESH_DIRECTORY "${STATIC_MESH}" DIRECTORY)
		get_filename_component(STATIC_MESH_EXT "${STATIC_MESH}" EXT)

		if (NOT STATIC_MESH_DIRECTORY STREQUAL "")
			set(STATIC_MESH_DIRECTORY "${STATIC_MESH_DIRECTORY}/")
		endif()

		set(STATIC_MESH "${RESOURCE_PACKAGE_DIRECTORY}/${STATIC_MESH}")
		set(STATIC_MESH_OUTPUT "${CMAKE_BINARY_DIR}/data/static_mesh/${STATIC_MESH_DIRECTORY}${STATIC_MESH_NAME}")

		# TODO: make this smarter
		set(STATIC_MESH_DEPENDS "${STATIC_MESH}" ${TEXTURE_OUTPUT_FILES} ${SHADER_OUTPUT_FILES} ${MATERIAL_OUTPUT_FILES})

        add_custom_command(
			OUTPUT ${STATIC_MESH_OUTPUT}
			COMMAND sigma-bake -o "${CMAKE_BINARY_DIR}" "${STATIC_MESH}"
			DEPENDS ${STATIC_MESH_DEPENDS}
			WORKING_DIRECTORY ${RESOURCE_PACKAGE_DIRECTORY}
        )

	list(APPEND STATIC_MESH_OUTPUT_FILES ${STATIC_MESH_OUTPUT})
    endforeach()

	add_custom_target(${RESOURCE_TARGET}-resources DEPENDS ${SHADER_OUTPUT_FILES} ${TEXTURE_OUTPUT_FILES} ${MATERIAL_OUTPUT_FILES} ${STATIC_MESH_OUTPUT_FILES})
endfunction()

function(bake_resources)

	get_property(PROJECT_ROOTS GLOBAL PROPERTY "PROJECT_ROOTS")
	message(STATUS "${PROJECT_ROOTS}")
    # foreach(PROJECT_ROOT ${ARGV})
    #     set(PROJECT_ROOT "${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT_ROOT}")
	# 	list(APPEND ALL_INCLUDE_DIRECTORIES "-I" "${PROJECT_ROOT}/include")
	# 	list(APPEND ALL_INCLUDE_DIRECTORIES "-I" "${PROJECT_ROOT}/resources")
    #
	# 	file(GLOB_RECURSE HEADER_FILES RELATIVE "${PROJECT_ROOT}/include"
	# 		"${PROJECT_ROOT}/include/*.hpp"
	# 		"${PROJECT_ROOT}/include/*.h"
	# 	)
    #
	# 	foreach(HEADER ${HEADER_FILES})
	# 		file(STRINGS "${PROJECT_ROOT}/include/${HEADER}" COMPONENTS REGEX "^REGISTER_COMPONENT\\(.*\\)")
	# 		if(COMPONENTS)
	# 			set(ALL_COMPONENT_INCLUDES "${ALL_COMPONENT_INCLUDES}\n#include <${HEADER}>")
	# 		endif()
	# 		foreach(COMPONENT ${COMPONENTS})
	# 			string(REGEX REPLACE "^REGISTER_COMPONENT\\((.*)\\)" "\\1" COMPONENT "${COMPONENT}")
	# 			list(APPEND ALL_COMPONENTS "${COMPONENT}")
	# 		endforeach()
	# 	endforeach()
    # endforeach()
	#
	# message(STATUS "${ALL_COMPONENT_INCLUDES}")
	# message(STATUS "${ALL_COMPONENTS}")
endfunction()
